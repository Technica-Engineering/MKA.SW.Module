#encoding: utf-8
#vim syntax=python fileencoding=utf-8 tabstop=4 expandtab shiftwidth=4
#
################################################################################
#
# MKA daemon.
# SPDX-FileCopyrightText: 2022 Technica Engineering GmbH <macsec@technica-engineering.de>
# SPDX-License-Identifier: GPL-2.0-or-later
# file: wscript
#
# Â© 2022 Technica Engineering GmbH.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see https://www.gnu.org/licenses/
#
################################################################################

from waflib import Build

# This is target "test" invoked via "python waf test".
# It can be invoked at root folder (all tests run) or in this specific folder (only tests defined here run).
def test(ut):
    # Emit friendly errors.
    isinstance(ut, Build.BuildContext) or ut.fatal("Project is not configured. Please run 'python waf configure --top=../..'")

    # Enable compiler sanitisers
    for var in (ut.env.CFLAGS, ut.env.CPPFLAGS, ut.env.LDFLAGS):
        var.extend(["-fsanitize=address", "-fsanitize=undefined"])

    # Every call to ut() will create a compilation of a unit test.
    ut(
        name = "cp", # --> run me with: "python waf test --targets=cp"
        source = "ut_mka_cp.cpp ../../src/pae/mka_cp.c mocks_cp/mocks.cpp ../../src/utils/mka_logging.c",
        coverage_disable = ".",
        defines = [ "UNIT_TEST=1", "MKA_CFG_LOGGING_LEVEL=MKA_LOGLEVEL_DEBUG", ],
        includes = ". .. mocks_cp ../../src ../../src/pae ../../src/l2 ../../src/utils ../../src/crypto",
        cflags = "-Wall -ggdb",
        ldflags = "-ggdb",
    )

    ut(
        name = "kay", # --> run me with: "python waf test --targets=kay"
        source = "ut_kay_rx.cpp ut_kay_tx.cpp ../../src/pae/mka_kay.c ../../src/pae/mka_kay_params.c ../../src/utils/mka_logging.c mocks_kay/mocks.cpp",
        coverage_disable = ".",
        defines = [ "UNIT_TEST=1", "MKA_CFG_LOGGING_LEVEL=MKA_LOGLEVEL_DEBUG", ],
        includes = ". .. mocks_kay ../../src ../../src/pae ../../src/l2 ../../src/utils ../../src/crypto",
        cflags = "-Wall -Wextra -Wunused -Werror -Wstrict-overflow -Wshadow  "
                " -Wpointer-arith -Wundef -Wcast-align -Wmissing-prototypes "
                " -Wwrite-strings -ggdb",
        ldflags = "-ggdb",
    )

    ut(
        name = "logon", # --> run me with: "python waf test --targets=logon"
        source = "ut_mka_logon.cpp ../../src/pae/mka_logon.c mocks_logon/mocks.cpp ../../src/utils/mka_logging.c",
        coverage_disable = ".",
        defines = [ "UNIT_TEST=1", "MKA_CFG_LOGGING_LEVEL=MKA_LOGLEVEL_DEBUG", ],
        includes = ". .. mocks_logon ../../src ../../src/pae ../../src/l2 ../../src/utils ../../src/crypto",
        cflags = "-Wall -ggdb",
        ldflags = "-ggdb",
    )

    ut(
        name = "secy", # --> run me with: "python waf test --targets=secy"
        source = "ut_mka_secy.cpp ../../src/pae/mka_secy.c mocks_secy/mocks.cpp ../../src/utils/mka_logging.c",
        coverage_disable = ".",
        defines = [ "UNIT_TEST=1", "MKA_CFG_LOGGING_LEVEL=MKA_LOGLEVEL_DEBUG", ],
        includes = ". .. mocks_secy ../../src ../../src/pae ../../src/l2 ../../src/utils ../../src/crypto",
        cflags = "-Wall -ggdb",
        ldflags = "-ggdb",
    )

def options(opts):
    pass

def configure(conf):
    pass

